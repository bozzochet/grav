title: PLUGIN_ADMIN.SCHEDULER

form:
    validation: loose

    fields:
        scheduler_tabs:
            type: tabs
            active: 1

            fields:
                status_tab:
                    type: tab
                    title: PLUGIN_ADMIN.SCHEDULER_STATUS

                    fields:
                        status_title:
                            type: section
                            title: PLUGIN_ADMIN.SCHEDULER_STATUS
                            underline: true

                        status:
                            type: cronstatus
                            validate:
                                type: commalist
                                
                        webhook_status_override:
                            type: display
                            label:
                            content: |
                                <script>
                                (function() {
                                    function updateSchedulerStatus() {
                                        // Find all notice bars
                                        var notices = document.querySelectorAll('.notice');
                                        var webhookStatusChecked = false;
                                        
                                        // Check for modern scheduler and webhook settings
                                        fetch(window.location.origin + '/grav-editor-pro/scheduler/health')
                                            .then(response => response.json())
                                            .then(data => {
                                                if (data.webhook_enabled) {
                                                    notices.forEach(function(notice) {
                                                        if (notice.textContent.includes('Not Enabled for user:')) {
                                                            // This is the cron status notice - replace it
                                                            notice.className = 'notice info';
                                                            notice.innerHTML = '<i class="fa fa-fw fa-check-circle"></i> <strong>Webhook Active</strong> - Scheduler can be triggered via webhook. Cron is not configured.';
                                                        }
                                                    });
                                                    
                                                    // Also update the main status if it exists
                                                    var statusDiv = document.querySelector('.cronstatus-status');
                                                    if (statusDiv && statusDiv.textContent.includes('Not Enabled')) {
                                                        statusDiv.className = 'cronstatus-status success';
                                                        statusDiv.innerHTML = '<i class="fa fa-fw fa-check"></i> Webhook Ready';
                                                    }
                                                }
                                            })
                                            .catch(error => {
                                                console.log('Webhook status check failed:', error);
                                            });
                                    }
                                    
                                    // Run on page load
                                    if (document.readyState === 'loading') {
                                        document.addEventListener('DOMContentLoaded', updateSchedulerStatus);
                                    } else {
                                        updateSchedulerStatus();
                                    }
                                    
                                    // Also run after a short delay to catch any late-rendered elements
                                    setTimeout(updateSchedulerStatus, 500);
                                })();
                                </script>
                            markdown: false
                                
                        status_enhanced:
                            type: display
                            label:
                            content: |
                                <script>
                                document.addEventListener('DOMContentLoaded', function() {
                                    // Check if modern features are enabled
                                    var modernEnabled = document.querySelector('[name="data[scheduler][modern][enabled]"]:checked');
                                    var webhookEnabled = document.querySelector('[name="data[scheduler][modern][webhook][enabled]"]:checked');
                                    var statusDiv = document.querySelector('.cronstatus-status');
                                    
                                    // Also find the parent notice bar
                                    var noticeBar = document.querySelector('.notice.alert');
                                    
                                    if (statusDiv) {
                                        var currentStatus = statusDiv.textContent || statusDiv.innerText;
                                        var cronReady = currentStatus.includes('Ready');
                                        var cronNotEnabled = currentStatus.includes('Not Enabled');
                                        
                                        // Check if scheduler-webhook plugin exists
                                        var webhookPluginInstalled = false;
                                        fetch(window.location.origin + '/grav-editor-pro/scheduler/health')
                                            .then(response => response.json())
                                            .then(data => {
                                                webhookPluginInstalled = true;
                                                updateStatusDisplay(data);
                                            })
                                            .catch(error => {
                                                updateStatusDisplay(null);
                                            });
                                        
                                        function updateStatusDisplay(healthData) {
                                            var isModernEnabled = modernEnabled && modernEnabled.value == '1';
                                            var isWebhookEnabled = webhookEnabled && webhookEnabled.value == '1';
                                            var isWebhookReady = webhookPluginInstalled && isWebhookEnabled && healthData && healthData.webhook_enabled;
                                            
                                            // Update the main status text
                                            var mainStatusText = '';
                                            var mainStatusClass = '';
                                            
                                            if (cronReady && isWebhookReady) {
                                                mainStatusText = 'Cron and Webhook Ready';
                                                mainStatusClass = 'success';
                                            } else if (cronReady) {
                                                mainStatusText = 'Cron Ready';
                                                mainStatusClass = 'success';
                                            } else if (isWebhookReady) {
                                                mainStatusText = 'Webhook Ready (No Cron)';
                                                mainStatusClass = 'success'; // Changed from warning to success
                                            } else if (cronNotEnabled && !isWebhookReady) {
                                                mainStatusText = 'Not Configured';
                                                mainStatusClass = 'error';
                                            } else {
                                                mainStatusText = 'Configuration Pending';
                                                mainStatusClass = 'warning';
                                            }
                                            
                                            // Update the notice bar if webhooks are ready
                                            if (noticeBar && isWebhookReady) {
                                                // Change from error (red) to success (green) or info (blue)
                                                noticeBar.classList.remove('alert');
                                                noticeBar.classList.add('info');
                                                
                                                var noticeIcon = noticeBar.querySelector('i.fa');
                                                if (noticeIcon) {
                                                    noticeIcon.classList.remove('fa-times-circle');
                                                    noticeIcon.classList.add('fa-check-circle');
                                                }
                                                
                                                var noticeText = noticeBar.querySelector('strong') || noticeBar;
                                                var username = noticeText.textContent.match(/user:\s*(\w+)/);
                                                if (username) {
                                                    noticeText.innerHTML = 'Webhook Ready for user: <b>' + username[1] + '</b> (Cron not configured)';
                                                } else {
                                                    noticeText.innerHTML = mainStatusText;
                                                }
                                            }
                                            
                                            // Update the main status div
                                            if (statusDiv) {
                                                statusDiv.innerHTML = '<i class="fa fa-fw fa-' + 
                                                    (mainStatusClass === 'success' ? 'check' : mainStatusClass === 'warning' ? 'exclamation' : 'times') + 
                                                    '"></i> ' + mainStatusText;
                                                statusDiv.className = 'cronstatus-status ' + mainStatusClass;
                                            }
                                            
                                            // Update install instructions button/content
                                            var installButton = document.querySelector('.cronstatus-install-button');
                                            var installDiv = document.querySelector('.cronstatus-install');
                                            
                                            if (installDiv) {
                                                var installHtml = '<div class="alert alert-info">';
                                                installHtml += '<h4>Setup Instructions:</h4>';
                                                
                                                var hasInstructions = false;
                                                
                                                // Cron setup
                                                if (!cronReady) {
                                                    installHtml += '<p><strong>Option 1: Traditional Cron</strong><br>';
                                                    installHtml += 'Run: <code>bin/grav scheduler --install</code><br>';
                                                    installHtml += 'This will add a cron job that runs every minute.</p>';
                                                    hasInstructions = true;
                                                }
                                                
                                                // Webhook setup
                                                if (isModernEnabled) {
                                                    if (!webhookPluginInstalled) {
                                                        installHtml += '<p><strong>Option 2: Webhook Support</strong><br>';
                                                        installHtml += '1. Install plugin: <code>bin/gpm install scheduler-webhook</code><br>';
                                                        installHtml += '2. Configure webhook token in Modern Features tab<br>';
                                                        installHtml += '3. Use webhook URL in your CI/CD or cloud scheduler</p>';
                                                        hasInstructions = true;
                                                    } else if (!isWebhookEnabled) {
                                                        installHtml += '<p><strong>Webhook Plugin Installed</strong><br>';
                                                        installHtml += 'Enable webhooks in Modern Features tab and set a secure token.</p>';
                                                        hasInstructions = true;
                                                    } else if (isWebhookReady) {
                                                        installHtml += '<p><strong>✅ Webhook is Active!</strong><br>';
                                                        installHtml += 'Trigger URL: <code>' + window.location.origin + '/grav-editor-pro/scheduler/webhook</code><br>';
                                                        installHtml += 'Use with Authorization header: <code>Bearer YOUR_TOKEN</code></p>';
                                                        
                                                        if (!cronReady) {
                                                            installHtml += '<p class="text-muted"><small>Note: No cron job configured. Scheduler runs only via webhook triggers.</small></p>';
                                                        }
                                                    }
                                                }
                                                
                                                if (!hasInstructions && cronReady) {
                                                    installHtml += '<p><strong>✅ Cron is configured and ready!</strong><br>';
                                                    installHtml += 'The scheduler runs automatically every minute via system cron.</p>';
                                                    
                                                    if (!isModernEnabled) {
                                                        installHtml += '<p class="text-muted"><small>Enable Modern Features for webhook support and advanced options.</small></p>';
                                                    }
                                                }
                                                
                                                installHtml += '</div>';
                                                installDiv.innerHTML = installHtml;
                                                
                                                // Update button text based on status
                                                if (installButton) {
                                                    if (cronReady && isWebhookReady) {
                                                        installButton.innerHTML = '<i class="fa fa-info-circle"></i> Configuration Details';
                                                    } else if (cronReady || isWebhookReady) {
                                                        installButton.innerHTML = '<i class="fa fa-plus-circle"></i> Add More Triggers';
                                                    } else {
                                                        installButton.innerHTML = '<i class="fa fa-exclamation-triangle"></i> Install Instructions';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                });
                                </script>

                        modern_status:
                            type: conditional
                            condition: config.scheduler.modern.enabled

                            fields:
                                modern_health:
                                    type: display
                                    label: Health Status
                                    content: |
                                        <div id="scheduler-health-status">
                                            <div class="text-muted">Checking health...</div>
                                        </div>
                                        <script>
                                        (function() {
                                            function loadHealthStatus() {
                                                fetch(window.location.origin + '/grav-editor-pro/scheduler/health')
                                                    .then(response => response.json())
                                                    .then(data => {
                                                        var statusEl = document.getElementById('scheduler-health-status');
                                                        if (!statusEl) return;
                                                        
                                                        var html = '<div class="scheduler-health-info">';
                                                        
                                                        // Status badge
                                                        var badge = 'secondary';
                                                        if (data.status === 'healthy') badge = 'success';
                                                        else if (data.status === 'warning') badge = 'warning';
                                                        else if (data.status === 'critical') badge = 'danger';
                                                        
                                                        html += '<p><strong>Status:</strong> <span class="badge badge-' + badge + '">' + 
                                                                (data.status || 'Unknown').toUpperCase() + '</span></p>';
                                                        
                                                        // Last run
                                                        if (data.last_run) {
                                                            var age = data.last_run_age;
                                                            var ageText = 'just now';
                                                            if (age > 3600) {
                                                                ageText = Math.floor(age / 3600) + ' hour(s) ago';
                                                            } else if (age > 60) {
                                                                ageText = Math.floor(age / 60) + ' minute(s) ago';
                                                            } else if (age > 0) {
                                                                ageText = age + ' second(s) ago';
                                                            }
                                                            html += '<p><strong>Last Run:</strong> ' + ageText + '</p>';
                                                        } else {
                                                            html += '<p><strong>Last Run:</strong> Never</p>';
                                                        }
                                                        
                                                        // Jobs count
                                                        html += '<p><strong>Scheduled Jobs:</strong> ' + (data.scheduled_jobs || 0) + '</p>';
                                                        
                                                        // Queue size (if modern features enabled)
                                                        if (data.modern_features && data.queue_size !== undefined) {
                                                            html += '<p><strong>Queue Size:</strong> ' + data.queue_size + '</p>';
                                                        }
                                                        
                                                        // Failed jobs
                                                        if (data.failed_jobs_24h > 0) {
                                                            html += '<p class="text-danger"><strong>Failed (24h):</strong> ' + data.failed_jobs_24h + '</p>';
                                                        }
                                                        
                                                        html += '</div>';
                                                        statusEl.innerHTML = html;
                                                    })
                                                    .catch(error => {
                                                        var statusEl = document.getElementById('scheduler-health-status');
                                                        if (statusEl) {
                                                            statusEl.innerHTML = '<div class="alert alert-warning">Unable to fetch health status. Ensure scheduler-webhook plugin is installed.</div>';
                                                        }
                                                    });
                                            }
                                            
                                            // Load on page ready
                                            if (document.readyState === 'loading') {
                                                document.addEventListener('DOMContentLoaded', loadHealthStatus);
                                            } else {
                                                loadHealthStatus();
                                            }
                                            
                                            // Refresh every 30 seconds
                                            setInterval(loadHealthStatus, 30000);
                                        })();
                                        </script>
                                    markdown: false

                                trigger_methods:
                                    type: display
                                    label: Active Triggers
                                    content: |
                                        <div id="scheduler-triggers">
                                            <div class="text-muted">Checking triggers...</div>
                                        </div>
                                        <script>
                                        (function() {
                                            function loadTriggers() {
                                                // Check cron status from the main status field
                                                var cronReady = false;
                                                var statusDiv = document.querySelector('.cronstatus-status');
                                                if (statusDiv) {
                                                    var statusText = statusDiv.textContent || statusDiv.innerText;
                                                    cronReady = statusText.includes('Ready');
                                                }
                                                
                                                // Check webhook status
                                                fetch(window.location.origin + '/grav-editor-pro/scheduler/health')
                                                    .then(response => response.json())
                                                    .then(data => {
                                                        var triggersEl = document.getElementById('scheduler-triggers');
                                                        if (!triggersEl) return;
                                                        
                                                        var html = '<ul class="list-unstyled">';
                                                        
                                                        // Cron status
                                                        if (cronReady) {
                                                            html += '<li>✅ <strong>Cron:</strong> <span class="badge badge-success">Active</span></li>';
                                                        } else {
                                                            html += '<li>❌ <strong>Cron:</strong> <span class="badge badge-secondary">Not Configured</span></li>';
                                                        }
                                                        
                                                        // Webhook status
                                                        if (data.webhook_enabled) {
                                                            html += '<li>✅ <strong>Webhook:</strong> <span class="badge badge-success">Active</span></li>';
                                                        } else {
                                                            var modernEnabled = document.querySelector('[name="data[scheduler][modern][enabled]"]:checked');
                                                            if (modernEnabled && modernEnabled.value == '1') {
                                                                html += '<li>⚠️ <strong>Webhook:</strong> <span class="badge badge-warning">Disabled</span></li>';
                                                            }
                                                        }
                                                        
                                                        html += '</ul>';
                                                        
                                                        // Add warning if no triggers active
                                                        if (!cronReady && !data.webhook_enabled) {
                                                            html += '<div class="alert alert-warning">No triggers active! Configure cron or enable webhooks.</div>';
                                                        }
                                                        
                                                        triggersEl.innerHTML = html;
                                                    })
                                                    .catch(error => {
                                                        var triggersEl = document.getElementById('scheduler-triggers');
                                                        if (triggersEl) {
                                                            // Show just cron status if health endpoint not available
                                                            var html = '<ul class="list-unstyled">';
                                                            if (cronReady) {
                                                                html += '<li>✅ <strong>Cron:</strong> <span class="badge badge-success">Active</span></li>';
                                                            } else {
                                                                html += '<li>❌ <strong>Cron:</strong> <span class="badge badge-secondary">Not Configured</span></li>';
                                                            }
                                                            html += '<li>⚠️ <strong>Webhook:</strong> <span class="badge badge-secondary">Plugin Not Installed</span></li>';
                                                            html += '</ul>';
                                                            triggersEl.innerHTML = html;
                                                        }
                                                    });
                                            }
                                            
                                            // Load on page ready
                                            if (document.readyState === 'loading') {
                                                document.addEventListener('DOMContentLoaded', loadTriggers);
                                            } else {
                                                loadTriggers();
                                            }
                                        })();
                                        </script>
                                    markdown: false

                jobs_tab:
                    type: tab
                    title: PLUGIN_ADMIN.SCHEDULER_JOBS

                    fields:
                        jobs_title:
                            type: section
                            title: PLUGIN_ADMIN.SCHEDULER_JOBS
                            underline: true

                        custom_jobs:
                            type: list
                            style: vertical
                            label:
                            classes: cron-job-list compact
                            key: id
                            fields:
                                .id:
                                    type: key
                                    label: ID
                                    placeholder: 'process-name'
                                    validate:
                                        required: true
                                        pattern: '[a-zа-я0-9_\-]+'
                                        max: 20
                                        message: 'ID must be lowercase with dashes/underscores only and less than 20 characters'
                                .command:
                                    type: text
                                    label: PLUGIN_ADMIN.COMMAND
                                    placeholder: 'ls'
                                    validate:
                                        required: true
                                .args:
                                    type: text
                                    label: PLUGIN_ADMIN.EXTRA_ARGUMENTS
                                    placeholder: '-lah'
                                .at:
                                    type: text
                                    wrapper_classes: cron-selector
                                    label: PLUGIN_ADMIN.SCHEDULER_RUNAT
                                    help: PLUGIN_ADMIN.SCHEDULER_RUNAT_HELP
                                    placeholder: '* * * * *'
                                    validate:
                                        required: true
                                .output:
                                    type: text
                                    label: PLUGIN_ADMIN.SCHEDULER_OUTPUT
                                    help: PLUGIN_ADMIN.SCHEDULER_OUTPUT_HELP
                                    placeholder: 'logs/ls-cron.out'
                                .output_mode:
                                    type: select
                                    label: PLUGIN_ADMIN.SCHEDULER_OUTPUT_TYPE
                                    help: PLUGIN_ADMIN.SCHEDULER_OUTPUT_TYPE_HELP
                                    default: append
                                    options:
                                        append: Append
                                        overwrite: Overwrite
                                .email:
                                    type: text
                                    label: PLUGIN_ADMIN.SCHEDULER_EMAIL
                                    help: PLUGIN_ADMIN.SCHEDULER_EMAIL_HELP
                                    placeholder: 'notifications@yoursite.com'

                modern_tab:
                    type: tab
                    title: Modern Features

                    fields:
                        modern.enabled:
                            type: toggle
                            label: Enable Modern Scheduler
                            help: Enable enhanced scheduler features (job queue, retry, webhooks, monitoring)
                            highlight: 0
                            default: 0
                            options:
                                1: PLUGIN_ADMIN.ENABLED
                                0: PLUGIN_ADMIN.DISABLED
                            validate:
                                type: bool

                        modern_features:
                            type: conditional
                            condition: config.scheduler.modern.enabled

                            fields:
                                workers_section:
                                    type: section
                                    title: Worker Configuration
                                    underline: true

                                    fields:
                                        modern.workers:
                                            type: number
                                            label: Concurrent Workers
                                            help: Number of jobs that can run simultaneously (1 = sequential)
                                            default: 1
                                            size: x-small
                                            append: workers
                                            validate:
                                                type: int
                                                min: 1
                                                max: 10

                                retry_section:
                                    type: section
                                    title: Retry Configuration
                                    underline: true

                                    fields:
                                        modern.retry.enabled:
                                            type: toggle
                                            label: Enable Job Retry
                                            help: Automatically retry failed jobs
                                            highlight: 1
                                            default: 1
                                            options:
                                                1: PLUGIN_ADMIN.ENABLED
                                                0: PLUGIN_ADMIN.DISABLED
                                            validate:
                                                type: bool

                                        modern.retry.max_attempts:
                                            type: number
                                            label: Maximum Retry Attempts
                                            help: Maximum number of times to retry a failed job
                                            default: 3
                                            size: x-small
                                            append: retries
                                            validate:
                                                type: int
                                                min: 1
                                                max: 10

                                        modern.retry.backoff:
                                            type: select
                                            label: Retry Backoff Strategy
                                            help: How to calculate delay between retries
                                            default: exponential
                                            options:
                                                linear: Linear (fixed delay)
                                                exponential: Exponential (increasing delay)

                                queue_section:
                                    type: section
                                    title: Queue Configuration
                                    underline: true

                                    fields:
                                        modern.queue.path:
                                            type: text
                                            label: Queue Storage Path
                                            help: Where to store queued jobs
                                            default: 'user-data://scheduler/queue'
                                            placeholder: 'user-data://scheduler/queue'

                                        modern.queue.max_size:
                                            type: number
                                            label: Maximum Queue Size
                                            help: Maximum number of jobs that can be queued
                                            default: 1000
                                            size: x-small
                                            append: jobs
                                            validate:
                                                type: int
                                                min: 100
                                                max: 10000

                                history_section:
                                    type: section
                                    title: Job History
                                    underline: true

                                    fields:
                                        modern.history.enabled:
                                            type: toggle
                                            label: Enable Job History
                                            help: Track execution history for all jobs
                                            highlight: 1
                                            default: 1
                                            options:
                                                1: PLUGIN_ADMIN.ENABLED
                                                0: PLUGIN_ADMIN.DISABLED
                                            validate:
                                                type: bool

                                        modern.history.retention_days:
                                            type: number
                                            label: History Retention (days)
                                            help: How long to keep job history
                                            default: 30
                                            size: x-small
                                            append: days
                                            validate:
                                                type: int
                                                min: 1
                                                max: 365

                                webhook_section:
                                    type: section
                                    title: Webhook Configuration
                                    underline: true

                                    fields:
                                        webhook_plugin_notice:
                                            type: display
                                            label:
                                            content: |
                                                <div class="alert alert-warning">
                                                    <strong>Plugin Required:</strong> The <code>scheduler-webhook</code> plugin must be installed and enabled for webhook functionality to work.
                                                    <br><br>
                                                    Install with: <code>bin/gpm install scheduler-webhook</code>
                                                </div>
                                            markdown: false
                                        modern.webhook.enabled:
                                            type: toggle
                                            label: Enable Webhook Triggers
                                            help: Allow triggering scheduler via HTTP webhook
                                            highlight: 0
                                            default: 0
                                            options:
                                                1: PLUGIN_ADMIN.ENABLED
                                                0: PLUGIN_ADMIN.DISABLED
                                            validate:
                                                type: bool

                                        modern.webhook.token:
                                            type: text
                                            label: Webhook Security Token
                                            help: Secret token for authenticating webhook requests. Keep this secret!
                                            placeholder: 'Click Generate to create a secure token'
                                            
                                        webhook_token_generate:
                                            type: display
                                            label:
                                            content: |
                                                <button type="button" class="button" onclick="generateWebhookToken()">Generate Token</button>
                                                <script>
                                                function generateWebhookToken() {
                                                    const array = new Uint8Array(32);
                                                    crypto.getRandomValues(array);
                                                    const token = Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
                                                    const field = document.querySelector('[name="data[scheduler][modern][webhook][token]"]');
                                                    if (field) {
                                                        field.value = token;
                                                        field.dispatchEvent(new Event('change', { bubbles: true }));
                                                    }
                                                }
                                                </script>
                                            markdown: false

                                        modern.webhook.path:
                                            type: text
                                            label: Webhook Path
                                            help: URL path for webhook endpoint
                                            default: '/scheduler/webhook'
                                            placeholder: '/scheduler/webhook'

                                health_section:
                                    type: section
                                    title: Health Check Configuration
                                    underline: true

                                    fields:
                                        modern.health.enabled:
                                            type: toggle
                                            label: Enable Health Check
                                            help: Provide health status endpoint for monitoring
                                            highlight: 1
                                            default: 1
                                            options:
                                                1: PLUGIN_ADMIN.ENABLED
                                                0: PLUGIN_ADMIN.DISABLED
                                            validate:
                                                type: bool

                                        modern.health.path:
                                            type: text
                                            label: Health Check Path
                                            help: URL path for health check endpoint
                                            default: '/scheduler/health'
                                            placeholder: '/scheduler/health'
                                            
                                webhook_usage:
                                    type: section
                                    title: Usage Examples
                                    underline: true
                                    
                                    fields:
                                        webhook_examples:
                                            type: display
                                            label:
                                            content: |
                                                <div class="alert alert-info">
                                                    <h4>How to use webhooks:</h4>
                                                    <p><strong>Trigger all due jobs (respects schedule):</strong></p>
                                                    <pre>curl -X POST https://your-site.com/scheduler/webhook \
                                                      -H "Authorization: Bearer YOUR_TOKEN"</pre>
                                                    
                                                    <p><strong>Force-run specific job (ignores schedule):</strong></p>
                                                    <pre>curl -X POST https://your-site.com/scheduler/webhook?job=backup \
                                                      -H "Authorization: Bearer YOUR_TOKEN"</pre>
                                                    
                                                    <p><strong>Check health status:</strong></p>
                                                    <pre>curl https://your-site.com/scheduler/health</pre>
                                                    
                                                    <p><strong>GitHub Actions example:</strong></p>
                                                    <pre>- name: Trigger Scheduler
                                                  run: |
                                                    curl -X POST ${{ secrets.SITE_URL }}/scheduler/webhook \
                                                      -H "Authorization: Bearer ${{ secrets.WEBHOOK_TOKEN }}"</pre>
                                                </div>
                                            markdown: false




